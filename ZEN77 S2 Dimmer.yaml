blueprint:
  name: "Zooz ZEN77 S2 Dimmer"
  author: gregmac
  homeassistant: { min_version: 2023.3.1 }
  domain: automation
  description: >
    Setup actions for all the different key press combinations on the Zooz ZEN77 S2 700-series dimmer.


    Other features:

    * Local physical control can be enable/disabled

    * Configures important device settings:

      * Enables scene control (parameter 13)

      * Disables paddle programming mode (parameter 17, only on firmware 10.0+).

  input:
    device_id:
      name: Source
      description: |
        The device to add automation triggers to. 
        Note that the "Scene Control" parameter will be enabled on this device (triggered by it coming online).
      selector:
        device:
          integration: zwave_js
          manufacturer: Zooz
          model: ZEN77
          multiple: false

    local_control:
      name: "Configuration: Local phyiscal control"
      description: Enable or disable physical paddle on/off control (also known as "Smart Bulb Mode").
      default: 'undefined'
      selector: 
        select:
          mode: dropdown
          options:
            - label: Do not modify configuration
              value: 'undefined'
            - label: Physical paddle control enabled (device default)
              value: '1'
            - label: Physical paddle control disabled (control via Z-Wave only)
              value: '0'


    button_1_1x:      { name: "Paddle Up press 1x",   default: [], selector: { action: {} }, description: "Action to run when the button is pressed one time. Default: Turn on load." }
    button_1_2x:      { name: "Paddle Up press 2x",   default: [], selector: { action: {} }, description: "Action to run when the button is pressed two times." }
    button_1_3x:      { name: "Paddle Up press 3x",   default: [], selector: { action: {} }, description: "Action to run when the button is pressed three times. Note: Requires firmware 10.0+." }
    button_1_4x:      { name: "Paddle Up press 4x",   default: [], selector: { action: {} }, description: "Action to run when the button is pressed four times." }
    button_1_5x:      { name: "Paddle Up press 5x",   default: [], selector: { action: {} }, description: "Action to run when the button is pressed five times." }
    button_1_hold:    { name: "Paddle Up hold",       default: [], selector: { action: {} }, description: "Action to run when the button is held. Default: Increase dimmer brightness level." }
    button_1_release: { name: "Paddle Up release",    default: [], selector: { action: {} }, description: "Action to run when the button is released." }
    
    button_2_1x:      { name: "Paddle Down press 1x", default: [], selector: { action: {} }, description: "Action to run when the button is pressed one time. Default: Turn off load." }
    button_2_2x:      { name: "Paddle Down press 2x", default: [], selector: { action: {} }, description: "Action to run when the button is pressed two times." }
    button_2_3x:      { name: "Paddle Down press 3x", default: [], selector: { action: {} }, description: "Action to run when the button is pressed three times. Note: Requires firmware 10.0+." }
    button_2_4x:      { name: "Paddle Down press 4x", default: [], selector: { action: {} }, description: "Action to run when the button is pressed four times." }
    button_2_5x:      { name: "Paddle Down press 5x", default: [], selector: { action: {} }, description: "Action to run when the button is pressed five times." }
    button_2_hold:    { name: "Paddle Down hold",     default: [], selector: { action: {} }, description: "Action to run when the button is held. Default: Decrease dimmer brightness level." }
    button_2_release: { name: "Paddle Down release",  default: [], selector: { action: {} }, description: "Action to run when the button is released." }

mode: parallel
max_exceeded: silent

variables:
  # docs: https://www.support.getzooz.com/kb/article/549-zen76-s2-on-off-switch-700-advanced-settings/
  const_scene_control_param: 13
  const_scene_control_enable: 1
  const_local_control_param: 15
  const_local_programming_param: 26
  const_local_programming_disable: 1
  
trigger:
  - platform: event
    event_type: zwave_js_value_notification
    event_data:
      command_class_name: Central Scene
      device_id: !input device_id

  # used for initialization
  - platform: event
    event_type: automation_reloaded

action:
  - variables:
      #button_id: '{{ trigger.event.data.property_key_name }}'
      scene_id: "{{ trigger.event.data.label }}"
      event_action: "{{ trigger.event.data.value }}"
  - choose:
      # initialize
      - conditions: "{{ trigger.event.event_type == 'automation_reloaded' }}"
        sequence:
        
          # enable scene control
          - alias: "zwavejs: Enable scene control"
            service: zwave_js.set_config_parameter
            target: { device_id: !input device_id }
            data: { parameter: "{{ const_scene_control_param }}", value: "{{ const_scene_control_enable }}" }

          - alias: "zwavejs: Disable local programming to allow 3-press actions. Requires Firmware 10.0+"
            service: zwave_js.set_config_parameter
            continue_on_error: true # avoid failure for older firmware
            target: { device_id: !input device_id } 
            data: { parameter: "{{ const_local_programming_param }}", value: "{{ const_local_programming_disable }}" }

          # setup local control
          - if:
              - condition: template
                value_template: "{{ '!input local_control' != 'undefined' }}"
            then:
              - alias: "zwavejs: Setup local control"
                service: zwave_js.set_config_parameter
                target: { device_id: !input device_id }
                data: { parameter: "{{ const_local_control_param }}", value: !input local_control }

      # button press event
      - conditions: "{{ scene_id == 'Scene 001' }}"
        sequence:
          - choose:
              - { conditions: "{{ event_action == 'KeyPressed' }}",   sequence: !input button_1_1x }
              - { conditions: "{{ event_action == 'KeyPressed2x' }}", sequence: !input button_1_2x }
              - { conditions: "{{ event_action == 'KeyPressed3x' }}", sequence: !input button_1_3x }
              - { conditions: "{{ event_action == 'KeyPressed4x' }}", sequence: !input button_1_4x }
              - { conditions: "{{ event_action == 'KeyPressed5x' }}", sequence: !input button_1_5x }
              - { conditions: "{{ event_action == 'KeyHeldDown' }}",  sequence: !input button_1_hold }
              - { conditions: "{{ event_action == 'KeyReleased' }}",  sequence: !input button_1_release }
      - conditions: "{{ scene_id == 'Scene 002' }}"
        sequence:
          - choose:
              - { conditions: "{{ event_action == 'KeyPressed' }}",   sequence: !input button_2_1x }
              - { conditions: "{{ event_action == 'KeyPressed2x' }}", sequence: !input button_2_2x }
              - { conditions: "{{ event_action == 'KeyPressed3x' }}", sequence: !input button_2_3x }
              - { conditions: "{{ event_action == 'KeyPressed4x' }}", sequence: !input button_2_4x }
              - { conditions: "{{ event_action == 'KeyPressed5x' }}", sequence: !input button_2_5x }
              - { conditions: "{{ event_action == 'KeyHeldDown' }}",  sequence: !input button_2_hold }
              - { conditions: "{{ event_action == 'KeyReleased' }}",  sequence: !input button_2_release }
