blueprint:
  name: "Zooz ZEN32 Scene Controller: Custom Scene Control"
  description: >
    Link a Zooz ZEN32 Scene Controller button to a custom scene.


    Due to HomeAssistant limitations with scenes, an enity must be picked to show status
    of the scene. The best choice is to create a group that contains all the entities
    in the scene and use that.


  domain: automation
  input:
    device_id:
      name: Zooz Switch
      description: List of available Zooz ZEN32 switches.
      selector:
        device:
          integration: zwave_js
          manufacturer: Zooz
          model: ZEN32
    scene_button:
      name: Scene Button
      description: The button to link to light
      default: '001'
      selector:
        select:
          mode: dropdown
          options:
            - label: Scene 5 (Big Button)
              value: '005'
            - label: Scene 1 (Top Left)
              value: '001'
            - label: Scene 2 (Top Right)
              value: '002'
            - label: Scene 3 (Bottom Left)
              value: '003'
            - label: Scene 4 (Bottom Right)
              value: '004'

    light1:
      name: Light 1
      selector:
        entity: 
          domain: light
    light1_brightness:
      name: Light 1 Brightness
      default: 100
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: '%'

    light2:
      name: Light 2
      default: []
      selector:
        entity: 
          domain: light
    light2_brightness:
      name: Light 2 Brightness
      default: 100
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: '%'

    # light3:
    #   name: Light 3
    #   default: []
    #   selector:
    #     entity: 
    #       domain: light
    # light3_brightness:
    #   name: Light 3 Brightness
    #   default: 100
    #   selector:
    #     number:
    #       min: 0
    #       max: 100
    #       unit_of_measurement: '%'

    # light4:
    #   name: Light 4
    #   default: []
    #   selector:
    #     entity: 
    #       domain: light
    # light4_brightness:
    #   name: Light 4 Brightness
    #   default: 100
    #   selector:
    #     number:
    #       min: 0
    #       max: 100
    #       unit_of_measurement: '%'

    all_match_color:
      name: 'LED Indicator: Scene active'
      description: Scene button indicator color when scene is active (default off)
      default: '-1'
      selector:
        select:
          mode: dropdown
          options:
            - label: 'Off'
              value: '-1'
            - label: White
              value: '0'
            - label: Blue
              value: '1'
            - label: Green
              value: '2'
            - label: Red
              value: '3'

    any_on_color:
      name: 'LED Indicator: Any scene lights on'
      description: Scene button indicator color when any light is on but scene isn't active (default blue)
      default: '1'
      selector:
        select:
          mode: dropdown
          options:
            - label: 'Off'
              value: '-1'
            - label: White
              value: '0'
            - label: Blue
              value: '1'
            - label: Green
              value: '2'
            - label: Red
              value: '3'

    all_off_color:
      name: 'LED Indicator: All lights off'
      description: Scene button indicator color when no lights match (default white)
      default: '0'
      selector:
        select:
          mode: dropdown
          options:
            - label: 'Off'
              value: '-1'
            - label: White
              value: '0'
            - label: Blue
              value: '1'
            - label: Green
              value: '2'
            - label: Red
              value: '3'

    match_delta:
      name: Delta
      description: What % current brightness has to be within desired to be considered "on"
      default: 5
      selector:
        number:
          min: 0
          max: 100
          unit_of_measurement: '%'


mode: restart
max_exceeded: silent

variables:
  # minimum value to consider light as "full" brightness
  full_brightness: 250

  # constants from https://www.support.getzooz.com/kb/article/608-zen32-scene-controller-advanced-settings/
  led_always_off: 2
  led_always_on: 3

  # entities
  device_id: !input device_id
  scene_button: !input scene_button
  all_match_color: !input all_match_color
  any_on_color: !input any_on_color
  all_off_color: !input all_off_color
  match_delta: !input match_delta

  light1: !input light1
  light2: !input light2
  light1_brightness: !input light1_brightness
  light2_brightness: !input light2_brightness

  # from https://www.support.getzooz.com/kb/article/608-zen32-scene-controller-advanced-settings/
  led_indicator_mode_param: "{{ ((scene_button | int) % 5) + 1 }}" # '005' => 1, '001' => 2, '002' => 3, '003' => 4, '004' => 5
  led_indicator_color_param: "{{ ((scene_button | int) % 5) + 6 }}" # '005' => 6, '001' => 7, '002' => 8, '003' => 9, '004' => 10


trigger:
  # controller trigger (set light)
  - platform: event
    event_type: zwave_js_value_notification
    event_data:
      command_class_name: Central Scene
      device_id: !input device_id

  # light state changed
  - platform: state
    entity_id: !input light1
  - platform: state
    entity_id: !input light2

  # used for initialization
  - platform: event
    event_type: automation_reloaded

action:
  - variables:
      light1_cur_state: "{%- if light1 -%}{{ states(light1) }}{%- endif -%}"
      light2_cur_state: "{%- if light2 -%}{{ states(light2) }}{%- endif -%}"

      light1_cur_brightness: "{%- if light1 -%}{{ (((state_attr(light1, 'brightness')|int(light1_brightness*2.55))/2.55)|round) if light1_cur_state == 'on' else 0 }}{%- endif -%}"
      light2_cur_brightness: "{%- if light2 -%}{{ (((state_attr(light2, 'brightness')|int(light2_brightness*2.55))/2.55)|round) if light2_cur_state == 'on' else 0 }}{%- endif -%}"

      light1_diff: "{{ (light1_brightness - light1_cur_brightness|int(999)) | abs | round }}"
      light2_diff: "{{ (light2_brightness - light2_cur_brightness|int(999)) | abs | round }}"

      light1_match: "{{ light1_diff < match_delta }}"
      light2_match: "{{ light2_diff < match_delta }}"

      all_match: "{{ light1_match and (light2_match or not light2) }}"
      any_on: "{{ light1_cur_state == 'on' or light2_cur_state == 'on' }}"

  # initialize
  # docs: https://www.support.getzooz.com/kb/article/608-zen32-scene-controller-advanced-settings/
  - if:
      - condition: template
        value_template: "{{ trigger.event.event_type == 'automation_reloaded' }}"
    then:
      - service: zwave_js.set_config_parameter
        data:
          parameter: 23                     # Enable / disable LED indicator for settings
          value: 1                          # LED indicators don't flash if a setting is changed.
        target: 
          device_id: !input device_id
  
  # debug
  - service: logbook.log
    data:
      name: AutomationTest
      message: |
        trigger.entity_id: {{ trigger.entity_id }}

        all_match: {{ all_match }}
        any_on: {{ any_on }}

        light1: {{ light1 }}
        light1_brightness: {{ light1_brightness }}
        light1_cur_state: {{ light1_cur_state }}
        light1_cur_brightness: {{ light1_cur_brightness }}
        light1_diff: {{ light1_diff }}
        light1_match: {{ light1_match }}

        light2: {{ light2 }}
        light2_brightness: {{ light2_brightness }}
        light2_cur_state: {{ light2_cur_state }}
        light2_cur_brightness: {{ light2_cur_brightness }}
        light2_diff: {{ light2_diff }}
        light2_match: {{ light2_match }}

  - choose:
      # controller
      - alias: Controller button pressed
        conditions: "{{ trigger.event.data.device_id == device_id and trigger.event.data.property_key_name == scene_button }}"
        sequence: 
          - choose:
              - alias: Controller button single press
                conditions: "{{ trigger.event.data.value == 'KeyPressed' }}"
                sequence:
                  - service: light.turn_on
                    target: 
                      entity_id: !input light1

              - alias: Controller button double press
                conditions: "{{ trigger.event.data.value == 'KeyPressed2x' }}"
                sequence:
                  - service: light.turn_on
                    data:
                      brightness_pct: 100
                    target: 
                      entity_id: !input light1

              - alias: Controller button held
                conditions: "{{ trigger.event.data.value == 'KeyHeldDown' }}"
                sequence:
                  - service: light.turn_off
                    target: 
                      entity_id: !input light1

      # initializing, or light changed
      - alias: Light state changed
        conditions: >-
          {{
            (trigger.event and trigger.event.event_type == 'automation_reloaded')
            or trigger.entity_id == light1 
            or trigger.entity_id == light2
          }}
        sequence:
          - choose:
              - alias: "All match, LED color = off"
                conditions: "{{ all_match and all_match_color == '-1' }}"
                sequence: 
                  - alias: Turn off ZEN32 indicator LED
                    service: zwave_js.set_config_parameter 
                    data:
                      parameter: "{{ led_indicator_mode_param }}"
                      value: "{{ led_always_off }}"
                    target: 
                      device_id: !input device_id
              - alias: "All match, LED color specified"
                conditions: "{{ all_match }}"
                sequence: 
                  - parallel: 
                      - alias: Set ZEN32 indicator LED color
                        service: zwave_js.set_config_parameter 
                        data:
                          parameter: "{{ led_indicator_color_param }}"
                          value: !input all_match_color
                        target: 
                          device_id: !input device_id
                      - alias: Turn on ZEN32 indicator LED
                        service: zwave_js.set_config_parameter 
                        data:
                          parameter: "{{ led_indicator_mode_param }}"
                          value: "{{ led_always_on }}"
                        target: 
                          device_id: !input device_id

              - alias: "Any on, LED color = off"
                conditions: "{{ any_on and any_on_color == '-1' }}"
                sequence: 
                  - alias: Turn off ZEN32 indicator LED
                    service: zwave_js.set_config_parameter 
                    data:
                      parameter: "{{ led_indicator_mode_param }}"
                      value: "{{ led_always_off }}"
                    target: 
                      device_id: !input device_id
              - alias: "Any on, LED color specified"
                conditions: "{{ any_on }}"
                sequence:
                  - parallel: 
                      - alias: Set ZEN32 indicator LED color
                        service: zwave_js.set_config_parameter 
                        data:
                          parameter: "{{ led_indicator_color_param }}"
                          value: !input any_on_color
                        target: 
                          device_id: !input device_id
                      - alias: Turn on ZEN32 indicator LED
                        service: zwave_js.set_config_parameter 
                        data:
                          parameter: "{{ led_indicator_mode_param }}"
                          value: "{{ led_always_on }}"
                        target: 
                          device_id: !input device_id

              - alias: "No match, LED color = off"
                conditions: "{{ all_off_color == '-1'}}"
                sequence:
                  - alias: Turn off ZEN32 indicator LED
                    service: zwave_js.set_config_parameter 
                    data:
                      parameter: "{{ led_indicator_mode_param }}"
                      value: "{{ led_always_off }}"
                    target: 
                      device_id: !input device_id
              - alias: "No match, LED color specified"
                conditions: "{{ true }}"
                sequence:
                  - parallel: 
                    - alias: Set ZEN32 indicator LED color
                      service: zwave_js.set_config_parameter 
                      data:
                        parameter: "{{ led_indicator_color_param }}"
                        value: !input all_off_color
                      target: 
                        device_id: !input device_id
                    - alias: Turn on ZEN32 indicator LED
                      service: zwave_js.set_config_parameter 
                      data:
                        parameter: "{{ led_indicator_mode_param }}"
                        value: "{{ led_always_on }}"
                      target: 
                        device_id: !input device_id

